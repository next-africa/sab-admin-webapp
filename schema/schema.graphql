schema {
  query: SabQuery
  mutation: SabMutation
}

# An address
type Address {
  line: String
  city: String
  state: String
  postalCode: String
}

input AddressInput {
  state: String
  postalCode: String
  line: String
  city: String
}

# A country
type Country implements Node {
  # The ID of an object
  id: ID!

  # The properties of the country
  properties: CountryProperties
}

# Properties of a Country object
type CountryProperties {
  # The code of the country
  code: String

  # The name of the country.
  name: String
}

input CreateCountryInput {
  name: String!
  code: String!
  clientMutationId: String!
}

type CreateCountryPayload {
  country: Country!
  clientMutationId: String!
}

input CreateUniversityInput {
  clientMutationId: String!
  countryCode: String!
  university: UniversityInputForCreate!
}

type CreateUniversityPayload {
  clientMutationId: String!
  university: University
}

# An object with an ID
interface Node {
  # The id of the object
  id: ID!
}

# All the mutation available on Study abroad apy
type SabMutation {
  createCountry(input: CreateCountryInput!): CreateCountryPayload
  createUniversity(input: CreateUniversityInput!): CreateUniversityPayload
  updateUniversity(input: UpdateUniversityInput!): UpdateUniversityPayload
}

type SabQuery {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Get the list of countries supported by the application
  countries: [Country]

  # Get a country by country code
  country(
    # The code of the country to get
    code: String!
  ): Country!

  # Get the list of universities of this the given country
  universities(
    # The country code of the country from witch to retrieve universities
    countryCode: String!
  ): [University]!

  # Get a country by country code
  university(
    # The code of the country to get
    countryCode: String!

    # The university Id to get
    universityId: String!
  ): University!
}

# A tuition object with amount and source link
type Tuition {
  amount: Int
  link: String
}

input TuitionInput {
  amount: Int!
  link: String!
}

# A University
type University implements Node {
  # The ID of an object
  id: ID!

  # The properties of the university
  properties: UniversityProperties
}

input UniversityInputForCreate {
  languages: [String]!
  website: String!
  programListLink: String
  address: AddressInput
  tuition: TuitionInput
  name: String!
}

input UniversityInputForUpdate {
  programListLink: String
  address: AddressInput
  tuition: TuitionInput
  id: String!
  name: String!
  languages: [String]!
  website: String!
}

# Properties of an University object
type UniversityProperties {
  # The link to the program list of this University
  programListLink: String
  address: Address
  tuition: Tuition
  id: String

  # The name of University.
  name: String

  # The code of the languages used in this University
  languages: [String]

  # The link to the website of this University
  website: String
}

input UpdateUniversityInput {
  clientMutationId: String!
  countryCode: String!
  university: UniversityInputForUpdate!
}

type UpdateUniversityPayload {
  university: University
  clientMutationId: String!
}
